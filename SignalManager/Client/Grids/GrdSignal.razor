@inherits Grid<IqOptionAdminSignalDomain>

@this.Body
@this.LoadingSpinner

@code {
    public bool SelectedAll
    {
        get;
        set;
    }

    [Parameter]
    public Action<Signal> OnEditCallback
    {
        get;
        set;
    }

    [Parameter]
    public Action<Signal> OnRemoveCallback
    {
        get;
        set;
    }

    [Parameter]
    public UserDomain User
    {
        get;
        set;
    }

    protected override Task OnInitializedAsync()
    {
        this.Class = "d-flex flex-row w-100 align-self-center mt-xl-2 mt-lg-2 p-2";

        return Task.Run(async () => {
            try
            {
                await this.DataBag.ExecuteAsync(this.SignalOnInitializeAsync());
                this.SignalInitialization();

                this.Body = this.RenderBody();
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        });
    }

    private void SignalOnInitializeAsyncEvent(bool value)
    {
        try
        {
            this.LoadingSpinner = @<Spinner PVisible="!value"/>;
        }
        finally
        {
            this.StateHasChanged();
        }
    }

    private RenderFragment LoadingSpinner
    {
        get;
        set;
    }

    private bool _booSignalOnInitializeAsync;

    private bool booSignalsOnInitializeAsync
    {
        get
        {
            return _booSignalOnInitializeAsync;
        }
        set
        {
            try
            {
                _booSignalOnInitializeAsync = value;
            }
            finally
            {
                this.SignalOnInitializeAsyncEvent(value);
            }
        }
    }

    public override Collection<RenderFragment> GetBase()
    {
        Base BaseContainer = new Base();
        BaseContainer.Parent = this;
        BaseContainer.Class = "flex-column w-100 m-xl-1 m-lg-1 fnt-default-size-xl fnt-default-size-lg fnt-default-size-md fnt-default-size-sm";
        BaseContainer.Content = new Collection<RenderFragment>();
        BaseContainer.Content.Add(this.GetHeader(BaseContainer));

        if (this.Data == null || this.Data.Count < 1)
        {
            return new Collection<RenderFragment>() { BaseContainer.RenderBody() };
        }

        foreach (RenderFragment child in this.GetBody(BaseContainer))
        {
            BaseContainer.Content.Add(child);
        }

        return new Collection<RenderFragment>() { BaseContainer.RenderBody() };
    }

    public override RenderFragment GetHeader(Base Parent)
    {
        Base HeaderContainer = new Base();
        HeaderContainer.Parent = Parent;
        HeaderContainer.Class = "d-flex flex-column bg-dark text-white rounded w-100 p-2";
        HeaderContainer.Style = "min-height:44px";
        HeaderContainer.Content = new Collection<RenderFragment>();

        Base HeaderCardContainer = new Base();
        HeaderCardContainer.Parent = Parent;
        HeaderCardContainer.Class = "d-inline-flex d-xl-none d-lg-none d-md-inline-flex d-sm-inline-flex w-100 justify-content-center text-center";
        HeaderCardContainer.Content = new Collection<RenderFragment>() {
            new B() { Parent = HeaderContainer, Text="Sinais" }.RenderBody()
        };

        Base HeaderSubContainer = new Base();
        HeaderSubContainer.Parent = Parent;
        HeaderSubContainer.Class = "d-none d-xl-inline-flex d-lg-inline-flex d-md-none d-sm-none  rounded text-white bg-dark w-100";
        HeaderSubContainer.Content = new Collection<RenderFragment>();

        Base SelectedHOption = new Base();
        SelectedHOption.Parent = HeaderSubContainer;
        SelectedHOption.Class = "col-1 text-center";
        SelectedHOption.Content = new Collection<RenderFragment>();

        Base SelectedHOptionSubContainer = new Base();
        SelectedHOptionSubContainer.Parent = SelectedHOption;
        SelectedHOptionSubContainer.Class = "d-flex justify-content-center pl-4";
        SelectedHOptionSubContainer.Content = new Collection<RenderFragment>() {
            new Input<bool>() { Parent = SelectedHOptionSubContainer, Class="form-check-input", Type="checkbox", Value=this.SelectedAll }.RenderBody()
        };

        SelectedHOption.Content.Add(SelectedHOptionSubContainer.RenderBody());

        Base DateHOption = new Base();
        DateHOption.Parent = HeaderSubContainer;
        DateHOption.Class = "col-2";
        DateHOption.Content = new Collection<RenderFragment>() {
            new B() { Parent = DateHOption, Text="Data" }.RenderBody()
        };

        Base DurationHOption = new Base();
        DurationHOption.Parent = HeaderSubContainer;
        DurationHOption.Class = "col-1";
        DurationHOption.Content = new Collection<RenderFragment>() {
            new B() { Parent = DurationHOption, Text="Duração" }.RenderBody()
        };

        Base AmountHOption = new Base();
        AmountHOption.Parent = HeaderSubContainer;
        AmountHOption.Class = "col-2 text-center";
        AmountHOption.Content = new Collection<RenderFragment>() {
            new B() { Parent = AmountHOption, Text="Valor" }.RenderBody()
        };

        Base TagsHOption = new Base();
        TagsHOption.Parent = HeaderSubContainer;
        TagsHOption.Class = "col-5 text-center";
        TagsHOption.Content = new Collection<RenderFragment>() {
            new B() { Parent = TagsHOption, Text="Tags" }.RenderBody()
        };

        Base EditHOption = new Base();
        EditHOption.Parent = HeaderSubContainer;
        EditHOption.Class = "col-1";
        EditHOption.Content = new Collection<RenderFragment>() {
            new B() { Parent = HeaderContainer, Text="" }.RenderBody()
        };

        HeaderSubContainer.Content.Add(SelectedHOption.RenderBody());
        HeaderSubContainer.Content.Add(DateHOption.RenderBody());
        HeaderSubContainer.Content.Add(DurationHOption.RenderBody());
        HeaderSubContainer.Content.Add(AmountHOption.RenderBody());
        HeaderSubContainer.Content.Add(TagsHOption.RenderBody());
        HeaderSubContainer.Content.Add(EditHOption.RenderBody());

        HeaderContainer.Content.Add(HeaderCardContainer.RenderBody());
        HeaderContainer.Content.Add(HeaderSubContainer.RenderBody());

        return HeaderContainer.RenderBody();
    }

    public RenderFragment GetHeaderCards(Base Parent)
    {
        Base HeaderCardContainer = new Base();
        HeaderCardContainer.Parent = Parent;
        HeaderCardContainer.Class = "d-none d-xl-none d-lg-none d-md-inline-flex d-sm-inline-flex rounded text-white bg-dark w-100 p-2";
        HeaderCardContainer.Content = new Collection<RenderFragment>() {
            new B() { Parent = HeaderCardContainer, Text="Sinais" }.RenderBody()
        };

        return HeaderCardContainer.RenderBody();
    }

    public override Collection<RenderFragment> GetBody(Base Parent)
    {

        Collection<RenderFragment> Rows = new Collection<RenderFragment>();
        if (this.Data == null || this.Data.Count < 1)
        {
            return Rows;
        }

        foreach (IqOptionAdminSignalDomain item in this.Data.OrderBy(x => x.Entry))
        {

            Signal model = new Signal();
            model = Utils.Parse<IqOptionAdminSignalDomain, Signal>(item, model);

            Rows.Add(@<GrdSignalRow Parent="Parent" Model="model" OnEditCallback="OnEditCallback" OnRemoveCallback="OnRemoveCallback" OnModelUpdate="OnModelUpdate" OnModalCancelation="OnModalCancelation" />);
        }

        return Rows;
    }

    private void OnModelUpdate(Signal model)
    {
        this.Data.Update(model, model.Uuid.ToString());

        this.ReRenderBody();
    }

    private void OnModalCancelation(Signal model)
    {
        this.ReRenderBody();
    }

    private void SignalInitialization()
    {
        while (!this.booSignalsOnInitializeAsync)
        {
            System.Threading.Thread.Sleep(10);
        }

        Console.WriteLine("Inicialização dos sinais do administrador (page)...");

        List<IqOptionAdminSignalDomain> lstSignal = this.DataBag.Get("sigmgmt_signals_adm") as List<IqOptionAdminSignalDomain>;
        if (lstSignal == null || lstSignal.Count < 1)
        {
            this.Data = new DataController<IqOptionAdminSignalDomain>();

            return;
        }

        Console.WriteLine("Sinais do adiminstrador carregados com sucesso.");

        this.Data.AddRange(lstSignal);
    }

    private async Task SignalOnInitializeAsync()
    {
        Console.WriteLine("Inicialização dos sinais do administrador (base)...");

        this.booSignalsOnInitializeAsync = false;

        try
        {
            if (this.User == null || string.IsNullOrEmpty(this.User.Uuid.ToString()) || string.IsNullOrWhiteSpace(this.User.Uuid.ToString()))
            {
                Console.WriteLine("Skipped.");

                return;
            }

            var lstSignal = await this.PostWithTokenAsync<IqOptionAdminSignalDomain>("Signal/FetchAllAsync", new IqOptionAdminSignalDomain() { UuidUser = this.User.Uuid }, true);
            if (lstSignal == null && lstSignal.Count < 1)
            {

                Console.WriteLine("Sem sinais do administrador..");

                return;
            }

            this.DataBag.Set(new Bag("sigmgmt_signals_adm", lstSignal));
            Console.WriteLine("Sinais do administrador recuperados com sucesso.");
        }
        finally
        {
            this.booSignalsOnInitializeAsync = true;
        }
    }
}
