@inherits Grid<Signal>
@inject User User 

@this.Body

@code {
    public bool SelectedAll
    {
        get;
        set;
    }

    [Parameter]
    public Action OnEditCallback
    {
        get;
        set;
    }

    [Parameter]
    public Action OnRemoveCallback
    {
        get;
        set;
    }

    protected override Task OnInitializedAsync()
    {
        base.OnInitializedAsync();

        this.Class = "d-flex flex-row w-100 align-self-center mt-xl-2 mt-lg-2 p-2";

        return Task.Run(() => {
            this.Body = this.RenderBody();
        });
    }

    public override Collection<RenderFragment> GetBase()
    {
        Base BaseContainer = new Base();
        BaseContainer.Parent = this;
        BaseContainer.Class = "flex-column w-100 m-xl-1 m-lg-1 fnt-default-size-xl fnt-default-size-lg fnt-default-size-md fnt-default-size-sm";
        BaseContainer.Content = new Collection<RenderFragment>();
        BaseContainer.Content.Add(this.GetHeader(BaseContainer));

        if (User.LevelAccess == EnmLevelAccess.DEFAULT)
        {
            this.Create();
        }

        if (this.Data == null || this.Data.Count < 1)
        {
            return new Collection<RenderFragment>() { BaseContainer.RenderBody() };
        }

        foreach (RenderFragment child in this.GetBody(BaseContainer))
        {
            BaseContainer.Content.Add(child);
        }

        return new Collection<RenderFragment>() { BaseContainer.RenderBody() };
    }

    public override RenderFragment GetHeader(Base Parent)
    {
        Base HeaderContainer = new Base();
        HeaderContainer.Parent = Parent;
        HeaderContainer.Class = "d-flex flex-column bg-dark text-white rounded w-100 p-2";
        HeaderContainer.Style = "min-height:44px";
        HeaderContainer.Content = new Collection<RenderFragment>();

        Base HeaderCardContainer = new Base();
        HeaderCardContainer.Parent = Parent;
        HeaderCardContainer.Class = "d-inline-flex d-xl-none d-lg-none d-md-inline-flex d-sm-inline-flex w-100 justify-content-center text-center";
        HeaderCardContainer.Content = new Collection<RenderFragment>() {
            new B() { Parent = HeaderContainer, Text="Sinais" }.RenderBody()
        };

        Base HeaderSubContainer = new Base();
        HeaderSubContainer.Parent = Parent;
        HeaderSubContainer.Class = "d-none d-xl-inline-flex d-lg-inline-flex d-md-none d-sm-none  rounded text-white bg-dark w-100";
        HeaderSubContainer.Content = new Collection<RenderFragment>();

        Base SelectedHOption = new Base();
        SelectedHOption.Parent = HeaderSubContainer;
        SelectedHOption.Class = "col-1 text-center";
        SelectedHOption.Content = new Collection<RenderFragment>();

        Base SelectedHOptionSubContainer = new Base();
        SelectedHOptionSubContainer.Parent = SelectedHOption;
        SelectedHOptionSubContainer.Class = "d-flex justify-content-center pl-4";
        SelectedHOptionSubContainer.Content = new Collection<RenderFragment>() {
            new Input<bool>() { Parent = SelectedHOptionSubContainer, Class="form-check-input", Type="checkbox", Value=this.SelectedAll }.RenderBody()
        };

        SelectedHOption.Content.Add(SelectedHOptionSubContainer.RenderBody());

        Base DateHOption = new Base();
        DateHOption.Parent = HeaderSubContainer;
        DateHOption.Class = "col-2";
        DateHOption.Content = new Collection<RenderFragment>() {
            new B() { Parent = DateHOption, Text="Data" }.RenderBody()
        };

        Base DurationHOption = new Base();
        DurationHOption.Parent = HeaderSubContainer;
        DurationHOption.Class = "col-1";
        DurationHOption.Content = new Collection<RenderFragment>() {
            new B() { Parent = DurationHOption, Text="Duração" }.RenderBody()
        };

        Base AmountHOption = new Base();
        AmountHOption.Parent = HeaderSubContainer;
        AmountHOption.Class = "col-2 text-center";
        AmountHOption.Content = new Collection<RenderFragment>() {
            new B() { Parent = AmountHOption, Text="Valor" }.RenderBody()
        };

        Base TagsHOption = new Base();
        TagsHOption.Parent = HeaderSubContainer;
        TagsHOption.Class = "col-4 text-center";
        TagsHOption.Content = new Collection<RenderFragment>() {
            new B() { Parent = TagsHOption, Text="Tags" }.RenderBody()
        };

        Base EditHOption = new Base();
        EditHOption.Parent = HeaderSubContainer;
        EditHOption.Class = "col-2";
        EditHOption.Content = new Collection<RenderFragment>() {
            new B() { Parent = HeaderContainer, Text="" }.RenderBody()
        };

        HeaderSubContainer.Content.Add(SelectedHOption.RenderBody());
        HeaderSubContainer.Content.Add(DateHOption.RenderBody());
        HeaderSubContainer.Content.Add(DurationHOption.RenderBody());
        HeaderSubContainer.Content.Add(AmountHOption.RenderBody());
        HeaderSubContainer.Content.Add(TagsHOption.RenderBody());
        HeaderSubContainer.Content.Add(EditHOption.RenderBody());

        HeaderContainer.Content.Add(HeaderCardContainer.RenderBody());
        HeaderContainer.Content.Add(HeaderSubContainer.RenderBody());

        return HeaderContainer.RenderBody();
    }

    public RenderFragment GetHeaderCards(Base Parent)
    {
        Base HeaderCardContainer = new Base();
        HeaderCardContainer.Parent = Parent;
        HeaderCardContainer.Class = "d-none d-xl-none d-lg-none d-md-inline-flex d-sm-inline-flex rounded text-white bg-dark w-100 p-2";
        HeaderCardContainer.Content = new Collection<RenderFragment>() {
            new B() { Parent = HeaderCardContainer, Text="Sinais" }.RenderBody()
        };

        return HeaderCardContainer.RenderBody();
    }

    public override Collection<RenderFragment> GetBody(Base Parent)
    {
        Collection<RenderFragment> Rows = new Collection<RenderFragment>();
        if (this.Data == null || this.Data.Count < 1)
        {
            return Rows;
        }

        foreach (Signal model in this.Data.OrderBy(x => x.Date))
        {
            Base BodyContainer = new Base();
            BodyContainer.Parent = Parent;
            BodyContainer.Class = "d-inline-flex flex-row flex-wrap border-sm border-md tt-col-sm tt-col-md mt-2 w-100 min-sm-h-180";
            BodyContainer.Style = "border-radius:15px;";
            BodyContainer.Content = new Collection<RenderFragment>();

            Base SelectedHOptionContainer = new Base();
            SelectedHOptionContainer.Parent = BodyContainer;
            SelectedHOptionContainer.Class = "d-xl-block d-lg-block d-md-none d-sm-none col-xl-1 col-lg-1 col-md-12 col-sm-12 pr-0";
            SelectedHOptionContainer.Content = new Collection<RenderFragment>();

            Base SelectedHOptionSubContainer = new Base();
            SelectedHOptionSubContainer.Parent = SelectedHOptionContainer;
            SelectedHOptionSubContainer.Class = "d-flex justify-content-center pl-4";
            SelectedHOptionSubContainer.Content = new Collection<RenderFragment>() {
                new Input<bool>() { Parent = SelectedHOptionSubContainer, Class="form-check-input", Type="checkbox", Value=model.Selected }.RenderBody()
            };

            SelectedHOptionContainer.Content.Add(SelectedHOptionSubContainer.RenderBody());

            Base DateHOptionContainer = new Base();
            DateHOptionContainer.Parent = BodyContainer;
            DateHOptionContainer.Class = "col-xl-2 col-lg-2 col-md-9 col-sm-9 pt-xl-1 pt-lg-1";
            DateHOptionContainer.Content = new Collection<RenderFragment>() {
                new Text() { Parent = DateHOptionContainer, Content = model.Date.ToString("dd/MM/yyyy HH:mm:ss") }.RenderBody()
            };

            RenderFragment DataHOptionLabel = @<Label For="@DateHOptionContainer.Uid" Class="d-block d-xl-none d-lg-none d-md-block d-sm-block col-md-9 col-sm-9" Text="Data:" Bold="true" Style="max-height:18px"/>;

            Base DurationHOptionContainer = new Base();
            DurationHOptionContainer.Parent = BodyContainer;
            DurationHOptionContainer.Class = "col-xl-1 col-lg-1 col-md-9 col-sm-9 pt-xl-1 pt-lg-1 pl-xl-4 pl-lg-2";
            DurationHOptionContainer.Content = new Collection<RenderFragment>() {
                new Text() { Parent = DurationHOptionContainer, Content = ((int)model.Duration).ToString() }.RenderBody()
            };

            Base AmountHOptionContainer = new Base();
            AmountHOptionContainer.Parent = BodyContainer;
            AmountHOptionContainer.Class = "col-xl-2 col-lg-2 col-md-3 col-sm-3 pt-xl-1 pt-lg-1 text-xl-center text-lg-center";
            AmountHOptionContainer.Content = new Collection<RenderFragment>() {
                new Text() { Parent = AmountHOptionContainer, Content=model.Amount.ToString("N2") }.RenderBody()
            };

            RenderFragment AmountHOptionLabel = @<Label For="@AmountHOptionContainer.Uid" Class="d-block d-xl-none d-lg-none d-md-block d-sm-block col-md-3 col-sm-3" Text="Valor:" Bold="true" Style="max-height:18px"/>;

            Base TagsHOptionContainer = new Base();
            TagsHOptionContainer.Parent = BodyContainer;
            TagsHOptionContainer.Class = "col-xl-4 col-lg-4 col-md-9 col-sm-9 pt-xl-1 pt-lg-1 text-xl-center text-lg-center";
            TagsHOptionContainer.Content = new Collection<RenderFragment>();

            TagsHOptionContainer.Content.Add(@<MatChip Label="@model.PairName" />);
            TagsHOptionContainer.Content.Add(@<MatChip Label="@model.DirectionName" />);

            if (model.Martingale > 0)
            {
                TagsHOptionContainer.Content.Add(@<MatChip Label="@string.Format("{0} — R${1}", model.Martingale.ToString(), model.MartingaleValue.ToString("N2"))" />);
            }

            RenderFragment TagsHOptionLabel = @<Label For="@TagsHOptionContainer.Uid" Class="d-block d-xl-none d-lg-none d-md-block d-sm-block col-md-9 col-sm-9" Text="Par:" Bold="true" Style="max-height:18px"/>;

            // CARD-VIEW
            Base HOptionCard = new Base();
            HOptionCard.Parent = BodyContainer;
            HOptionCard.Class = "d-inline-flex d-xl-none d-lg-none d-md-inline-flex d-sm-inline-flex pt-1 pl-3 pr-3 w-100 bg-dark text-white";
            HOptionCard.Style = "border-bottom-right-radius:15px; border-bottom-left-radius:15px;";
            HOptionCard.Content = new Collection<RenderFragment>();

            Base EditHOptionCardContainer = new Base();
            EditHOptionCardContainer.Parent = HOptionCard;
            EditHOptionCardContainer.Class = "d-flex w-50 text-center";
            EditHOptionCardContainer.Content = new Collection<RenderFragment>() {
                this.GetEditControl(model, false)
            };

            Base RemoveHOptionCardContainer = new Base();
            RemoveHOptionCardContainer.Parent = HOptionCard;
            RemoveHOptionCardContainer.Class = "d-flex w-50 text-center";
            RemoveHOptionCardContainer.Content = new Collection<RenderFragment>() {
                this.GetRemoveControl(model, false)
            };

            HOptionCard.Content.Add(EditHOptionCardContainer.RenderBody());
            HOptionCard.Content.Add(RemoveHOptionCardContainer.RenderBody());

            // TABLE-VIEW
            Base EditHOptionContainer = new Base();
            EditHOptionContainer.Parent = BodyContainer;
            EditHOptionContainer.Class = "d-xl-block d-lg-block d-md-none d-sm-none col-1 text-center p-0 m-0";
            EditHOptionContainer.Content = new Collection<RenderFragment>() {
                this.GetEditControl(model, true)
            };

            Base RemoveHOptionContainer = new Base();
            RemoveHOptionContainer.Parent = BodyContainer;
            RemoveHOptionContainer.Class = "d-xl-block d-lg-block d-md-none d-sm-none d-xs-none col-1 text-center p-0 m-0";
            RemoveHOptionContainer.Content = new Collection<RenderFragment>() {
                this.GetRemoveControl(model, true)
            };

            // CARD-VIEW 
            // HIDDEN
            BodyContainer.Content.Add(SelectedHOptionContainer.RenderBody());

            // FIRST ROW 
            BodyContainer.Content.Add(DataHOptionLabel);
            BodyContainer.Content.Add(AmountHOptionLabel);

            BodyContainer.Content.Add(DateHOptionContainer.RenderBody());
            BodyContainer.Content.Add(DurationHOptionContainer.RenderBody());
            BodyContainer.Content.Add(AmountHOptionContainer.RenderBody());

            // SECOND ROW
            BodyContainer.Content.Add(TagsHOptionLabel);

            BodyContainer.Content.Add(TagsHOptionContainer.RenderBody());

            // THIRD ROW

            // CONTROL'S
            BodyContainer.Content.Add(HOptionCard.RenderBody());
            BodyContainer.Content.Add(EditHOptionContainer.RenderBody());
            BodyContainer.Content.Add(RemoveHOptionContainer.RenderBody());

            // MODAL
            BodyContainer.Content.Add(this.GetModal(BodyContainer, model));

            Rows.Add(BodyContainer.RenderBody());
        }

        return Rows;
    }

    private RenderFragment GetModal(Base Parent, Signal model)
    {
        return @<MatDialog @bind-IsOpen="@model.Editing">
                    <SignalModal Parent="Parent" Model="model" OnModelUpdateCallback=@(new Action<Signal>((m) => OnModelUpdate(m))) OnCancelationCallback=@(new Action<Signal>((m) => OnModalCancelation(m)))/>
                </MatDialog>;
    }

    private RenderFragment GetEditControl(Signal model, bool Link = false)
    {
        if (Link)
        {
            return @<Button Class="btn btn-link w-100" OnClick=@(new Action(() => OnEdit(null, model))) Text="Editar"/>;
        }

        return @<Button Class="btn btn-dark w-100" OnClick=@(new Action(() => OnEdit(null, model))) Text="Editar"/>;
    }

    private RenderFragment GetRemoveControl(Signal model, bool Link = false)
    {
        if (Link)
        {
            return @<Button Class="btn btn-link w-100" OnClick=@(new Action(() => OnRemove(null, model))) Text="Remover"/>;
        }

        return @<Button Class="btn btn-dark w-100" OnClick=@(new Action(() => OnRemove(null, model))) Text="Remover"/>;
    }

    private void OnEdit(MouseEventArgs e, Signal model)
    {
        model.Editing = true;

        this.OnEditCallback?.Invoke();
    }

    private void OnRemove(MouseEventArgs e, Signal model)
    {
        this.Data.Remove(model);

        this.OnRemoveCallback?.Invoke();
    }

    private void OnModelUpdate(Signal model)
    {
        this.Data.Update(model, model.Uid);

        this.ReRenderBody();
    }

    private void OnModalCancelation(Signal model)
    {
        this.ReRenderBody();
    }

    private void Create()
    {
        if (Data != null && Data.Count > 0)
        {
            return;
        }

        int intAmount = 1;
        int intMinutes = 10;

        Console.WriteLine("Create...");

        this.Data.Add(new Signal() { Uid = Guid.NewGuid().ToString(), Date = DateTime.Now.AddMinutes(++intMinutes), Amount = ++intAmount, Pair = Signal.Pairs.AUDCAD, Direction = Signal.Directions.PUT });
        this.Data.Add(new Signal() { Uid = Guid.NewGuid().ToString(), Date = DateTime.Now.AddMinutes(++intMinutes), Amount = ++intAmount, Pair = Signal.Pairs.AUDCHF, Direction = Signal.Directions.CALL });
        this.Data.Add(new Signal() { Uid = Guid.NewGuid().ToString(), Date = DateTime.Now.AddMinutes(++intMinutes), Amount = ++intAmount, Pair = Signal.Pairs.AUDJPY, Direction = Signal.Directions.PUT });
        this.Data.Add(new Signal() { Uid = Guid.NewGuid().ToString(), Date = DateTime.Now.AddMinutes(++intMinutes), Amount = ++intAmount, Pair = Signal.Pairs.AUDNOK, Direction = Signal.Directions.CALL });
        this.Data.Add(new Signal() { Uid = Guid.NewGuid().ToString(), Date = DateTime.Now.AddMinutes(++intMinutes), Amount = ++intAmount, Pair = Signal.Pairs.AUDNZD, Direction = Signal.Directions.PUT });
        this.Data.Add(new Signal() { Uid = Guid.NewGuid().ToString(), Date = DateTime.Now.AddMinutes(++intMinutes), Amount = ++intAmount, Pair = Signal.Pairs.AUDSEK, Direction = Signal.Directions.CALL });
        this.Data.Add(new Signal() { Uid = Guid.NewGuid().ToString(), Date = DateTime.Now.AddMinutes(++intMinutes), Amount = ++intAmount, Pair = Signal.Pairs.AUDSGD, Direction = Signal.Directions.PUT });
        this.Data.Add(new Signal() { Uid = Guid.NewGuid().ToString(), Date = DateTime.Now.AddMinutes(++intMinutes), Amount = ++intAmount, Pair = Signal.Pairs.AUDUSD, Direction = Signal.Directions.CALL });
    }
}
