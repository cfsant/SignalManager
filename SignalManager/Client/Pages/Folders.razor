@inherits Base

@this.Body
@this.LoadingSpinner

@code{
    [Parameter]
    public UserDomain User
    {
        get;
        set;
    }

    [Inject]
    public DataController<FolderDomain> Controller
    {
        get;
        set;
    }

    private bool AddFolderModalIsOpen
    {
        get;
        set;
    }

    private void FoldersOnInitializeAsyncEvent(bool value)
    {
        try
        {
            this.LoadingSpinner = @<Spinner PVisible="!value"/>;
        }
        finally
        {
            this.StateHasChanged();
        }
    }

    private RenderFragment LoadingSpinner
    {
        get;
        set;
    }

    private bool _booFoldersOnInitializeAsync;

    private bool booFoldersOnInitializeAsync
    {
        get
        {
            return _booFoldersOnInitializeAsync;
        }
        set
        {
            try
            {
                _booFoldersOnInitializeAsync = value;
            }
            finally
            {
                this.FoldersOnInitializeAsyncEvent(value);
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await this.DataBag.ExecuteAsync(this.FoldersOnInitializeAsync(this.User));
        this.FoldersInitialization();


        this.Body = this.RenderBody();
    }

    private void CreateDefaults()
    {
        this.Controller.Add(new FolderDomain()
        {
            Name = "Pasta 1",
        });
    }

    protected override void LoadContent()
    {
        this.Class = "d-flex flex-column justify-content-center";

        this.Content = new Collection<RenderFragment>();
        this.Content.Add(this.GetContainer());
        this.Content.Add(this.GetAddFolderModal(this));
    }

    public override void ReRenderBody()
    {
        this.Body = this.RenderBody();
        StateHasChanged();
    }

    private RenderFragment GetContainer()
    {
        Base contaiener = new Base();
        contaiener.Parent = this;
        contaiener.Class = "d-flex flex-row flex-wrap w-100 p-2 justify-content-center";
        contaiener.Content = new Collection<RenderFragment>();

        bool first = true;
        foreach (FolderDomain model in this.Controller)
        {
            contaiener.Content.Add(this.GetFolder(model, first));

            if (first)
            {
                first = !first;
            }
        }

        contaiener.Content.Add(this.GetAddFolder());

        return contaiener.RenderBody();
    }

    private RenderFragment GetFolder(FolderDomain model, bool first)
    {
        Base folder = new Base();
        folder.Parent = this;

        if (first)
        {
            folder.Class = "col-xl-3 col-lg-6 col-md-12 col-sm-12 border rounded p-0 mr-xl-2 mr-lg-2 mr-md-2";
        }
        else
        {
            folder.Class = "col-xl-3 col-lg-6 col-md-12 col-sm-12 border rounded p-0 mr-xl-2 mr-lg-2 mr-md-2 mt-xl-0 mt-lg-2 mt-md-2 mt-sm-2";
        }

        folder.Content = new Collection<RenderFragment>();
        folder.Content.Add(this.GetFolderHeader(folder, model));
        folder.Content.Add(this.GetFolderDescription(folder, model));
        folder.Content.Add(this.GetFolderControllers(folder, model));

        return folder.RenderBody();
    }

    private RenderFragment GetFolderHeader(Base parent, FolderDomain model)
    {
        Base folderHeader = new Base();
        folderHeader.Parent = this;
        folderHeader.Class = "col-12 bg-dark text-white rounded-top";
        folderHeader.Content = new Collection<RenderFragment>();
        folderHeader.Content.Add(@<B Parent=@parent PText=@model.Name/>);

        return folderHeader.RenderBody();
    }

    private RenderFragment GetFolderDescription(Base parent, FolderDomain model)
    {
        Base folderDescription = new Base();
        folderDescription.Parent = this;
        folderDescription.Class = "col-12";
        folderDescription.Style = "min-height:60px;";
        folderDescription.Content = new Collection<RenderFragment>();
        folderDescription.Content.Add(@<Span Text="@model.Description" />);

        return folderDescription.RenderBody();
    }

    private RenderFragment GetFolderControllers(Base parent, FolderDomain model)
    {
        Base ControlsContainer = new Base();
        ControlsContainer.Parent = parent;
        ControlsContainer.Class = "col-12 d-inline-flex justify-content-end p-0";
        ControlsContainer.Content = new Collection<RenderFragment>();

        Base EditHOptionContainer = new Base();
        EditHOptionContainer.Parent = ControlsContainer;
        EditHOptionContainer.Class = "d-flex text-center p-0 m-0";
        EditHOptionContainer.Content = new Collection<RenderFragment>() {
            this.GetEditControl(model, true)
        };

        Base RemoveHOptionContainer = new Base();
        RemoveHOptionContainer.Parent = ControlsContainer;
        RemoveHOptionContainer.Class = "d-flex text-center p-0 m-0";
        RemoveHOptionContainer.Content = new Collection<RenderFragment>() {
            this.GetRemoveControl(model, true)
        };

        ControlsContainer.Content.Add(EditHOptionContainer.RenderBody());
        ControlsContainer.Content.Add(RemoveHOptionContainer.RenderBody());

        return ControlsContainer.RenderBody();
    }

    private RenderFragment GetAddFolderControl()
    {
        return @<MatIconButton Icon="@MatIconNames.Add" OnClick=@(new Action(() => OnAddFolder()))/>;
    }

    private RenderFragment GetEditControl(FolderDomain model, bool Link = false)
    {
        if (Link)
        {
            return @<MatIconButton Icon="@MatIconNames.Settings" />;
            //return @<MatIconButton Icon="@MatIconNames.Edit" OnClick=@(new Action(() => OnEdit(null, model))) />;
        }

        return @<Button Class="btn btn-dark w-100" Text="Configurações" />;
        //return @<Button Class="btn btn-dark w-100" OnClick=@(new Action(() => OnEdit(null, model))) Text="Editar"/>;
    }

    private RenderFragment GetRemoveControl(FolderDomain model, bool Link = false)
    {
        if (Link)
        {
            return @<MatIconButton Icon="@MatIconNames.Delete" />;
            //return @<MatIconButton Icon="@MatIconNames.Delete" OnClick=@(new Action(() => OnRemove(null, model)))/>;
        }

        return @<Button Class="btn btn-dark w-100" Text="Remover" />;
        //return @<Button Class="btn btn-dark w-100" OnClick=@(new Action(() => OnRemove(null, model))) Text="Remover"/>;
    }

    private RenderFragment GetAddFolder()
    {
        Base folder = new Base();
        folder.Parent = this;

        if (this.Controller == null || this.Controller.Count < 1)
        {
            folder.Class = "col-xl-3 col-lg-6 col-md-12 col-sm-12 border rounded justify-content-center p-0 mr-xl-2 mr-lg-2 mr-md-2";
        }
        else
        {
            folder.Class = "col-xl-3 col-lg-6 col-md-12 col-sm-12 border rounded justify-content-center p-0 mr-xl-2 mr-lg-2 mr-md-2 mt-xl-0 mt-lg-2 mt-md-2 mt-sm-2";
        }

        folder.Content = new Collection<RenderFragment>();

        folder.Content.Add(this.GetAddFolderHeader(folder));
        folder.Content.Add(this.GetAddFolderDescription(folder));
        folder.Content.Add(this.GetAddFolderControllers(folder));

        return folder.RenderBody();
    }

    private RenderFragment GetAddFolderHeader(Base parent)
    {
        Base folderHeader = new Base();
        folderHeader.Parent = this;
        folderHeader.Class = "col-12 bg-dark text-white rounded-top";
        folderHeader.Content = new Collection<RenderFragment>();
        folderHeader.Content.Add(@<B Parent=@folderHeader PText="Nova pasta"/>);

        return folderHeader.RenderBody();
    }

    private RenderFragment GetAddFolderDescription(Base parent)
    {
        Base folderDescription = new Base();
        folderDescription.Parent = this;
        folderDescription.Class = "col-12";
        folderDescription.Style = "min-height:60px;";
        folderDescription.Content = new Collection<RenderFragment>();
        folderDescription.Content.Add(@<span>&nbsp;</span>);

        return folderDescription.RenderBody();
    }

    private RenderFragment GetAddFolderControllers(Base parent)
    {
        Base ControlsContainer = new Base();
        ControlsContainer.Parent = parent;
        ControlsContainer.Class = "col-12 d-inline-flex justify-content-end p-0";
        ControlsContainer.Content = new Collection<RenderFragment>();

        Base AddFolderHOptionContainer = new Base();
        AddFolderHOptionContainer.Parent = ControlsContainer;
        AddFolderHOptionContainer.Class = "d-flex text-center p-0 m-0";
        AddFolderHOptionContainer.Content = new Collection<RenderFragment>() {
            this.GetAddFolderControl()
        };

        ControlsContainer.Content.Add(AddFolderHOptionContainer.RenderBody());

        return ControlsContainer.RenderBody();
    }

    private RenderFragment GetAddFolderSvg()
    {
        return @<svg width="1em" height="1em" viewBox="0 0 16 16" class="d-flex bi bi-plus-circle-fill w-25 h-100 h-md-75" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                    <path fill-rule="evenodd" d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM8.5 4.5a.5.5 0 0 0-1 0v3h-3a.5.5 0 0 0 0 1h3v3a.5.5 0 0 0 1 0v-3h3a.5.5 0 0 0 0-1h-3v-3z" />
                </svg>;
    }
    
    private RenderFragment GetAddFolderModal(Base Parent)
    {
        return @<MatDialog @bind-IsOpen="@this.AddFolderModalIsOpen">
                    <FolderModal Parent="Parent" User="User" Model="new FolderDomain()" OnModelUpdateCallback=@(new Action<FolderDomain>((m) => OnModelUpdate(m))) OnCancelationCallback=@(new Action<FolderDomain>((m) => OnModalCancelation(m)))/>
                </MatDialog>;
    }

    private async Task FoldersOnInitializeAsync(UserDomain User)
    {
        Console.WriteLine("Inicialização das pastas do usuário (base)...");

        this.booFoldersOnInitializeAsync = false;

        try
        {
            if (User == null || string.IsNullOrEmpty(User.Uuid.ToString()) || string.IsNullOrWhiteSpace(User.Uuid.ToString()))
            {
                Console.WriteLine("Skipped.");

                return;
            }

            var lstFolder = await this.PostWithTokenAsync<FolderDomain>("Folder/FetchAllAsync", new FolderDomain() { UuidUser = User.Uuid }, true);
            if (lstFolder == null && lstFolder.Count < 1)
            {

                Console.WriteLine("Sem pastas para o usuário informado.");

                return;
            }

            this.DataBag.Set(new Bag("sigmgmt_folders", lstFolder));
            Console.WriteLine("Pastas do usuário recuperadas com sucesso.");
        }
        finally
        {
            this.booFoldersOnInitializeAsync = true;
        }
    }

    private void FoldersInitialization()
    {
        this.Controller = new DataController<FolderDomain>();
        while (!this.booFoldersOnInitializeAsync)
        {
            System.Threading.Thread.Sleep(10);
        }

        Console.WriteLine("Inicialização das pastas do usuário (page)...");

        var lstFolders = this.DataBag.Get("sigmgmt_folders") as List<FolderDomain>;
        if (lstFolders == null || lstFolders.Count < 1)
        {
            Console.WriteLine("O usuário corrente não possuí pastas cadastradas.");

            this.Controller = new DataController<FolderDomain>();

            return;
        }

        this.Controller.AddRange(lstFolders);
        if (this.Controller == null || this.Controller.Count < 1)
        {
            Console.WriteLine("O usuário corrente não possuí pastas cadastradas.");

            this.Controller = new DataController<FolderDomain>();

            return;
        }

        Console.WriteLine("Pastas do usuário recuperadas do databag.");
    }

    private void OnAddFolder()
    {
        this.AddFolderModalIsOpen = true;

        Console.WriteLine("AddFolderModalIsOpen: " + this.AddFolderModalIsOpen);
    }

    private void OnModelUpdate(FolderDomain model)
    {
        this.AddFolderModalIsOpen = false;

        this.Controller.Add(model);

        this.ReRenderBody();
    }

    private void OnModalCancelation(FolderDomain model)
    {
        this.AddFolderModalIsOpen = false;

        this.ReRenderBody();
    }
}