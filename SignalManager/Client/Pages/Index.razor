@page "/"
@inherits Page

@this.Body

@code{
    private bool booUserOnInitializeAsync
    {
        get;
        set;
    }

    private bool booFoldersOnInitializeAsync
    {
        get;
        set;
    }

    protected override Task OnInitializedAsync()
    {
        return Task.Run(async () => {
            await this.DataBag.ExecuteAsync(
                this.UserOnInitializeAsync()
            );

            this.Body = this.RenderBody();
        });
    }

    protected override void LoadContent()
    {
        this.Class = "d-flex flex-fill flex-column";

        this.Content = new Collection<RenderFragment>();
        this.Content.Add(@<TopNav Parent=this Title="Signal Manager" User="User" OnLogoutCallback="OnLogoutCallback" OnLoginCallback="OnLoginCallback"/>);

        this.LoadContentBody();
    }

    public void OnLogoutCallback()
    {
        User = new UserDomain();

        this.ReRenderBody();
    }

    public void OnLoginCallback()
    {
        this.ReRenderBody();
    }

    public void LoadContentBody()
    {
        if (!this.FirstInitialization)
        {
            this.UserInitialization();
            //this.FoldersInitialization();
        }
        else
        {
            this.FirstInitialization = false;
        }

        if (this.User != null && this.User.Uuid != null && this.User.Uuid != default)
        {
            // Cliente
            // this.Content.Add(@<Client Parent="this" User="User"/>);

            // Admin
            // this.Content.Add(@<Admin Parent="this" User="User" />);

            // Folder
            this.Content.Add(@<Folders Parent="this" User="User" />);
        }
    }

    public override void ReRenderBody()
    {
        this.Body = this.RenderBody();
        StateHasChanged();
    }

    private void UserInitialization()
    {
        while (!this.booUserOnInitializeAsync)
        {
            System.Threading.Thread.Sleep(10);
        }

        Console.WriteLine("Inicialização do usuário (page)...");

        if (this.User != null && !string.IsNullOrEmpty(this.User.Uuid.ToString()) && !string.IsNullOrWhiteSpace(this.User.Uuid.ToString()))
        {
            Console.WriteLine("Usuário já foi carregado.");

            return;
        }

        this.User = this.DataBag.Get("sigmgmt_user") as UserDomain;
        if (this.User == null || string.IsNullOrEmpty(this.User?.TokenAccess) || string.IsNullOrWhiteSpace(this.User?.TokenAccess) || string.IsNullOrEmpty(this.User?.Uuid?.ToString()) || string.IsNullOrWhiteSpace(this.User?.Uuid?.ToString()))
        {
            Console.WriteLine("Falha na recuperação do usuário.");

            this.User = new UserDomain();

            return;
        }

        Console.WriteLine("Usuário recuperado do databag.");
    }

    private async Task UserOnInitializeAsync()
    {
        Console.WriteLine("Inicialização do usuário (base)...");

        this.booUserOnInitializeAsync = false;
        UserDomain User = null;

        try
        {
            if (this.User != null && !string.IsNullOrEmpty(this.User.Uuid.ToString()) && !string.IsNullOrWhiteSpace(this.User.Uuid.ToString()))
            {
                Console.WriteLine("OK.");

                return;
            }


            var TokenAccess = await CookieManager.GetTokenAccess();
            if (string.IsNullOrEmpty(TokenAccess) || string.IsNullOrWhiteSpace(TokenAccess))
            {
                Console.WriteLine("Token inexistente.");

                return;
            }

            var lstUser = await this.PostWithTokenAsync<UserDomain>("User/LoginWithTokenAsync", new UserDomain() { TokenAccess = TokenAccess }, true);
            if (lstUser == null || lstUser.Count < 1)
            {
                Console.WriteLine("Token inválido.");

                return;
            }

            User = lstUser.First();
            if (User == null)
            {
                Console.WriteLine("Falha na recuperação.");
                return;
            }

            Console.WriteLine("Usuário recuperado com sucesso.");
            this.DataBag.Set(new Bag("sigmgmt_user", User));
        }
        finally
        {
            this.booUserOnInitializeAsync = true;
            //await this.FoldersOnInitializeAsync(User);
        }
    }
}